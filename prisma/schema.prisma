generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Auth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Plan {
  FREE
  PRO
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  plan          Plan      @default(FREE)
  quotaLimit    Int       @default(100)
  apiKey        String?   @unique @default(cuid())
  discordId     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          UserRole  @default(MEMBER)
  organization  Organization? @relation(fields: [orgId], references: [id])
  orgId         String?
  teams         Team[]

  accounts        Account[]
  sessions        Session[]
  EventCategories EventCategory[]
  events          Event[]
  Quota           Quota[]
  AuditLog        AuditLog[]

  @@index([email, apiKey])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Business Models
model EventCategory {
  id    String  @id @default(cuid())
  name  String
  color Int
  emoji String?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  events    Event[]

  @@unique([name, userId])
}

enum DeliveryStatus {
  PENDING
  DELIVERED
  FAILED
}

model Event {
  id               String @id @default(cuid())
  formattedMessage String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  name   String
  fields Json

  deliveryStatus DeliveryStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  EventCategory   EventCategory? @relation(fields: [eventCategoryId], references: [id])
  eventCategoryId String?

  @@index([createdAt])
}

model Quota {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  year  Int
  month Int
  count Int @default(0)

  updatedAt DateTime @updatedAt
}

// Enterprise Features
model Organization {
  id            String   @id @default(cuid())
  name          String
  slug          String   @unique
  plan          Plan     @default(FREE)
  users         User[]
  teams         Team[]
  apiKeys       ApiKey[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Team {
  id             String       @id @default(cuid())
  name           String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  members        User[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model ApiKey {
  id             String       @id @default(cuid())
  name           String
  key            String       @unique
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  lastUsed       DateTime?
  createdAt      DateTime     @default(now())
  expiresAt      DateTime?
}

enum UserRole {
  OWNER
  ADMIN
  MEMBER
}

// Audit Logging
model AuditLog {
  id        String    @id @default(cuid())
  action    String
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  metadata  Json
  createdAt DateTime  @default(now())
}

// Rate Limiting
model RateLimit {
  id        String   @id @default(cuid())
  key       String   @unique
  points    Int      @default(0)
  expire    DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}